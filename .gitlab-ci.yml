variables:
  OPERATION:
    description: Select CI/CD-operation to perform
    value: terraform
    options:
      - terraform
      - ansible
      - k8s
  TF_ROOT: ${CI_PROJECT_DIR}/infra
  TF_IN_AUTOMATION: "true"

stages:
  - tests
  - plan
  - apply
  - terratest
  - ansible_deploy
  - destroy
  - build
  - package

### SCRIPTS ###
.prepare-terraform-script: &prepare-terraform
  - cd ${TF_ROOT}
  - echo ${AUTHORIZED_KEY} | base64 -d > ${TF_ROOT}/authorized_key.json
  - export TF_VAR_service_account_key_file=${TF_ROOT}/authorized_key.json

.prepare-docker-push-script: &prepare-docker-push
  - docker login -u $DOCKER_USER -p $DOCKER_PASSWORD

### JOBS ###
scan-terraform-files:
  stage: tests
  image: bridgecrew/checkov:latest
  before_script: *prepare-terraform
  script:
    - checkov -d . --compact --quiet
  rules:
    - if: $OPERATION == "terraform"
      when: always
  allow_failure: true

plan-terraform-changes:
  stage: plan
  before_script: *prepare-terraform
  script:
    - terraform init
    - terraform plan
  rules:
    - if: $OPERATION == "terraform"
      when: always

apply-terraform-changes:
  stage: apply
  before_script: *prepare-terraform
  script:
    - terraform init
    - terraform apply -auto-approve
  rules:
    - if: $OPERATION == "terraform"
      when: manual
  needs:
    - job: plan-terraform-changes

destroy-terraform-infrastructure:
  stage: destroy
  before_script: *prepare-terraform
  script:
    - terraform init
    - terraform destroy -auto-approve
  rules:
    - if: $OPERATION == "terraform"
      when: manual

run-terraform-tests:
  stage: terratest
  before_script:
    - cd ${CI_PROJECT_DIR}/infra/test
  script:
    - go mod init terratest
    - go mod tidy
    - go test -v
  needs:
    - job: apply-terraform-changes
      optional: true
  rules:
    - when: manual
      if: $OPERATION == "terraform"
  allow_failure: false

deploy-with-ansible:
  stage: ansible_deploy
  image: williamyeh/ansible:ubuntu18.04
  before_script: *prepare-terraform
  script:
    - terraform init
    - mkdir -p ~/.ssh
    - echo ${SSH_PRIVATE_KEY} | base64 -d > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - cd ${CI_PROJECT_DIR}/ansible
    - ansible-playbook vault-playbook.yaml
  rules:
    - if: $OPERATION == "ansible"
      when: always

build-backend:
  stage: build
  before_script: *prepare-docker-push
  script:
    - docker build --build-arg VERSION=$CI_COMMIT_SHA --push -t ${DOCKER_USER}/sausage-backend:latest ${CI_PROJECT_DIR}/backend/
  rules:
    - if: $OPERATION == "k8s"
      when: always

build-frontend:
  stage: build
  before_script: *prepare-docker-push
  script:
    - docker build --push -t ${DOCKER_USER}/sausage-frontend:latest ${CI_PROJECT_DIR}/frontend/
  rules:
    - if: $OPERATION == "k8s"
      when: always

build-backend-report:
  stage: build
  before_script: *prepare-docker-push
  script:
    - docker build --push -t ${DOCKER_USER}/sausage-backend-report:latest ${CI_PROJECT_DIR}/backend-report/
  rules:
    - if: $OPERATION == "k8s"
      when: always

package-helm-chart:
  stage: package
  image:
    name: alpine/helm:3.12.0
    entrypoint: [""]
  before_script:
    - apk add curl
  script:
    - helm package ${CI_PROJECT_DIR}/sausage-store-chart
    - curl -u "$NEXUS_HELM_REPO_USER:$NEXUS_HELM_REPO_PASSWORD" $NEXUS_HELM_REPO --upload-file *.tgz
  needs:
    - job: build-backend
    - job: build-frontend
    - job: build-backend-report
  rules:
    - if: $OPERATION == "k8s"
      when: manual
  tags:
    - docker
